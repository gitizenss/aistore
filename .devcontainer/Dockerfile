# Use the Microsoft dev container base image
FROM ghcr.io/windmill-labs/windmill:dev

# Set the workspace
WORKDIR /root/@admins

# [Optional] Uncomment this section to install additional packages.
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
        # apt dependencies
        apt-transport-https ca-certificates gnupg-agent software-properties-common lsb-release \
        # Debian packaging utilities
        equivs \
        dpkg-dev \
        fakeroot \
        # Utilities
        ssh \
        sudo \
        gnupg2 \
        curl \
        wget \
        vim \
        bash-completion \
        netcat-openbsd \
        iputils-ping \
        net-tools \
        # Enable systemd
        systemd \
        systemd-sysv \
        dbus \
        # Testing dependencies
        docker \
        python3 \
        python3-pip \
        python3-venv \
        nginx \
        # JSON tools
        jq \
        jo

# tedge dependencies
# Install more recent version of mosquitto >= 2.0.18 from debian backports to avoid mosquitto following bugs:
# The mosquitto repo can't be used as it does not included builds for arm64/aarch64 (only amd64 and armhf)
# * https://github.com/eclipse/mosquitto/issues/2604 (2.0.11)
# * https://github.com/eclipse/mosquitto/issues/2634 (2.0.15)
RUN sh -c "echo 'deb [signed-by=/usr/share/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian bookworm-backports main' > /etc/apt/sources.list.d/debian-bookworm-backports.list" \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install -t bookworm-backports \
        mosquitto \
        mosquitto-clients

# Remove unnecessary systemd services
RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/systemd-update-utmp* \
    # Remove policy-rc.d file which prevents services from starting
    && rm -f /usr/sbin/policy-rc.d

# Install gh utility
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && sudo apt update \
    && sudo apt install -y gh

# Install nfpm packager
RUN echo "deb [trusted=yes] https://repo.goreleaser.com/apt/ /" | tee /etc/apt/sources.list.d/goreleaser.list \
    && apt update \
    && apt install -y nfpm

# Install docker cli
RUN mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-compose-plugin

# Node js (for browser based tests and documentation using docusaurus)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g yarn

# Instll just (project task runner)
RUN curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/bin/

# Update python deps
RUN pip3 install --upgrade pip --break-system-packages

# Delete the dummy systemctl command added by the base image
RUN rm -f /usr/local/bin/systemctl

# Persist bash history
USER root
RUN SNIPPET="export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history" \
    && mkdir /commandhistory \
    && touch /commandhistory/.bash_history \
    && echo "$SNIPPET" >> "/root/.bashrc" \
    # Enable bash-completion
    && echo "source /etc/profile.d/bash_completion.sh" >> "/root/.bashrc"

# Enable cross-rs to compile using docker-in-docker
ENV CROSS_CONTAINER_IN_CONTAINER=true
# Convert DOS line endings to Unix for the entire project ONLY if it's actually needed
RUN for f in $(find . -type f -exec file {} \; | grep CRLF | cut -d: -f1); do dos2unix $f; done

# Setup AIS configuration and disk
RUN mkdir -p /etc/aisnode/proxy /etc/aisnode/target /ais/disk0 \
    && dd if=/dev/zero of=/ais/disk0.img bs=1G count=10 \
    && mkfs.ext4 /ais/disk0.img \
    && echo '{\n  "fspaths": {\n    "/ais/disk0": {}\n  }\n}' > /etc/aisnode/target/ais.json \
    && echo '{}' > /etc/aisnode/proxy/ais.json \
    && echo "/ais/disk0.img /ais/disk0 ext4 loop 0 0" >> /etc/fstab

# Create necessary directories and files for AIS configuration
RUN mkdir -p /etc/aisnode/proxy /etc/aisnode/target /ais/disk0 \
    && touch /etc/aisnode/proxy/ais.json /etc/aisnode/target/ais.json

# Install required tools for disk management
RUN apt-get update && apt-get install -y \
    e2fsprogs \
    util-linux

# Setup AIS directories and configuration
RUN mkdir -p /etc/aisnode/proxy /etc/aisnode/target /ais/disk0 \
    && dd if=/dev/zero of=/ais/disk0.img bs=1G count=10 \
    && mkfs.ext4 /ais/disk0.img \
    && echo '{"confdir": "/etc/aisnode/target","log_dir": "/var/log/ais","host_net":{"hostname": "localhost","port": "8081"},"fspaths":{"/ais/disk0":{}}}' > /etc/aisnode/target/ais.json \
    && echo '{"confdir": "/etc/aisnode/proxy","log_dir": "/var/log/ais","host_net":{"hostname": "localhost","port": "8080"}}' > /etc/aisnode/proxy/ais.json

COPY startup.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/startup.sh

COPY init-ais.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/init-ais.sh


RUN apt-get --no-install-recommends -y install curl git sysstat attr build-essential lsof coreutils python3 python3-pip python3-setuptools s3cmd docker.io uuid-runtime bc gettext-base


ENTRYPOINT ["/usr/local/bin/init-ais.sh"]
# If the above solution does not work, consider configuring git to handle line endings properly:
# 1. Run the following commands to configure git:
#    git config --global core.autocrlf false
#    git config --global core.eol lf
# 2. Create/edit .gitattributes file in your root directory with:
#    *.sh text eol=lf
# 3. Apply the changes to your existing repository:
#    git rm --cached -r .
#    git reset --hard

CMD ["/lib/systemd/systemd", "--system", "--unit=basic.target"]